ARM GAS  C:\Users\HP\AppData\Local\Temp\ccIan0cE.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"ux_host_stack_transfer_request.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text._ux_host_stack_transfer_request,"ax",%progbits
  20              		.align	1
  21              		.global	_ux_host_stack_transfer_request
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	_ux_host_stack_transfer_request:
  27              	.LVL0:
  28              	.LFB11:
  29              		.file 1 "Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c"
   1:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /**************************************************************************/
   2:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                                                        */
   3:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                                                        */
   5:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*       This software is licensed under the Microsoft Software License   */
   6:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*       and in the root directory of this software.                      */
   9:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                                                        */
  10:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /**************************************************************************/
  11:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
  12:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
  13:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /**************************************************************************/
  14:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /**************************************************************************/
  15:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /**                                                                       */ 
  16:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /** USBX Component                                                        */ 
  17:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /**                                                                       */
  18:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /**   Host Stack                                                          */
  19:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /**                                                                       */
  20:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /**************************************************************************/
  21:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /**************************************************************************/
  22:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
  23:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
  24:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /* Include necessary system files.  */
  25:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
  26:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** #define UX_SOURCE_CODE
  27:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
  28:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** #include "ux_api.h"
  29:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** #include "ux_host_stack.h"
ARM GAS  C:\Users\HP\AppData\Local\Temp\ccIan0cE.s 			page 2


  30:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
  31:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
  32:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /**************************************************************************/ 
  33:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                                                        */ 
  34:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*  FUNCTION                                               RELEASE        */ 
  35:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                                                        */ 
  36:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*    _ux_host_stack_transfer_request                     PORTABLE C      */ 
  37:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                                           6.1.10       */
  38:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*  AUTHOR                                                                */
  39:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                                                        */
  40:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*    Chaoqiong Xiao, Microsoft Corporation                               */
  41:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                                                        */
  42:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*  DESCRIPTION                                                           */
  43:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                                                        */ 
  44:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*    This function performs a USB transaction. On entry the transfer     */ 
  45:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*    request gives the endpoint pipe selected for this transaction and   */ 
  46:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*    the parameters associated with the transfer (data payload, length   */ 
  47:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*    of transaction)                                                     */
  48:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                                                        */
  49:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*    For Control pipe, the transaction is blocking and will only return  */ 
  50:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*    when the 3 phases of the control transfer have been completed or if */ 
  51:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*    there is a previous error. For other pipes, the USB stack will      */ 
  52:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*    schedule the transaction on the USB but will not wait for its       */ 
  53:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*    completion. Each request for non blocking pipes has to specify a    */ 
  54:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*    completion routine.                                                 */
  55:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                                                        */ 
  56:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*  INPUT                                                                 */ 
  57:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                                                        */ 
  58:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*    transfer_request                      Transfer request structure    */ 
  59:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                                                        */ 
  60:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*  OUTPUT                                                                */ 
  61:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                                                        */ 
  62:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*    Completion Status                     If UX_SUCCESS, transfer was   */ 
  63:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                            successfully started        */ 
  64:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                                                        */ 
  65:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*  CALLS                                                                 */ 
  66:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                                                        */ 
  67:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*    HCD Entry Function                                                  */ 
  68:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*    _ux_utility_semaphore_put             Put semaphore                 */
  69:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*    _ux_utility_semaphore_get             Get semaphore                 */
  70:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                                                        */ 
  71:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*  CALLED BY                                                             */ 
  72:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                                                        */ 
  73:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*    Application                                                         */ 
  74:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*    USBX Components                                                     */ 
  75:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                                                        */ 
  76:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*  RELEASE HISTORY                                                       */ 
  77:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                                                        */ 
  78:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*    DATE              NAME                      DESCRIPTION             */ 
  79:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                                                        */ 
  80:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
  81:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
  82:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                            optimized based on compile  */
  83:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                            definitions, used UX prefix */
  84:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                            to refer to TX symbols      */
  85:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                            instead of using them       */
  86:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                            directly,                   */
ARM GAS  C:\Users\HP\AppData\Local\Temp\ccIan0cE.s 			page 3


  87:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                            resulting in version 6.1    */
  88:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */
  89:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                            added standalone support,   */
  90:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                            resulting in version 6.1.10 */
  91:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /*                                                                        */
  92:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** /**************************************************************************/
  93:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** UINT  _ux_host_stack_transfer_request(UX_TRANSFER *transfer_request)
  94:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** {
  30              		.loc 1 94 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		.loc 1 94 1 is_stmt 0 view .LVU1
  35 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 24
  38              		.cfi_offset 4, -24
  39              		.cfi_offset 5, -20
  40              		.cfi_offset 6, -16
  41              		.cfi_offset 7, -12
  42              		.cfi_offset 8, -8
  43              		.cfi_offset 14, -4
  95:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** #if defined(UX_HOST_STANDALONE)
  96:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** UINT        status;
  97:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
  98:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     UX_TRANSFER_STATE_RESET(transfer_request);
  99:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     _ux_host_stack_transfer_run(transfer_request);
 100:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     if ((transfer_request -> ux_transfer_request_flags & UX_TRANSFER_FLAG_AUTO_WAIT))
 101:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     {
 102:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         while(1)
 103:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         {
 104:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
 105:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****             /* Allow tasks running during waiting.  */
 106:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****             _ux_system_host_tasks_run();
 107:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
 108:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****             if (transfer_request -> ux_transfer_request_state <= UX_STATE_NEXT)
 109:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****                 break;
 110:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         }
 111:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         status = transfer_request -> ux_transfer_request_completion_code;
 112:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     }
 113:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     else
 114:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     {
 115:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
 116:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         /* In this mode, transfer pending is a success started case.  */
 117:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         if (transfer_request -> ux_transfer_request_completion_code == UX_TRANSFER_STATUS_PENDING)
 118:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****             status = UX_SUCCESS;
 119:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         else
 120:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****             status = transfer_request -> ux_transfer_request_completion_code;
 121:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     }
 122:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
 123:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     /* Return transfer completion status.  */
 124:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     return(status);
 125:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** #else
 126:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** UX_INTERRUPT_SAVE_AREA
  44              		.loc 1 126 1 is_stmt 1 view .LVU2
 127:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
 128:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** UX_ENDPOINT     *endpoint;  
ARM GAS  C:\Users\HP\AppData\Local\Temp\ccIan0cE.s 			page 4


  45              		.loc 1 128 1 view .LVU3
 129:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** UX_DEVICE       *device;    
  46              		.loc 1 129 1 view .LVU4
 130:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** UX_HCD          *hcd;
  47              		.loc 1 130 1 view .LVU5
 131:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** UINT            status;
  48              		.loc 1 131 1 view .LVU6
 132:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     
 133:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
 134:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     /* Get the endpoint container from the transfer_request */
 135:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     endpoint =  transfer_request -> ux_transfer_request_endpoint;
  49              		.loc 1 135 5 view .LVU7
  50              		.loc 1 135 14 is_stmt 0 view .LVU8
  51 0004 4668     		ldr	r6, [r0, #4]
  52              	.LVL1:
 136:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
 137:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     /* Get the device container from the endpoint.  */
 138:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     device =  endpoint -> ux_endpoint_device;
  53              		.loc 1 138 5 is_stmt 1 view .LVU9
  54              		.loc 1 138 12 is_stmt 0 view .LVU10
  55 0006 F76A     		ldr	r7, [r6, #44]
  56              	.LVL2:
 139:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
 140:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     /* Ensure we are not preempted by the enum thread while we check the device 
 141:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****        state and set the transfer status.  */
 142:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     UX_DISABLE
  57              		.loc 1 142 5 is_stmt 1 view .LVU11
  58              	.LBB12:
  59              	.LBI12:
  60              		.file 2 "Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h"
   1:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
   2:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
   3:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
   5:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*       This software is licensed under the Microsoft Software License   */
   6:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*       and in the root directory of this software.                      */
   9:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  10:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  11:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  12:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  13:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  14:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  15:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  16:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /** ThreadX Component                                                     */
  17:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  18:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**   Port Specific                                                       */
  19:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  20:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  21:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  22:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  23:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  24:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  25:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  26:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  PORT SPECIFIC C INFORMATION                            RELEASE        */
  27:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
ARM GAS  C:\Users\HP\AppData\Local\Temp\ccIan0cE.s 			page 5


  28:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    tx_port.h                                         Cortex-M4/GNU     */
  29:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                           6.1.12       */
  30:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  31:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  AUTHOR                                                                */
  32:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  33:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    Scott Larson, Microsoft Corporation                                 */
  34:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  35:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  DESCRIPTION                                                           */
  36:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  37:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    This file contains data type definitions that make the ThreadX      */
  38:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    real-time kernel function identically on a variety of different     */
  39:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    processor architectures.  For example, the size or number of bits   */
  40:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    in an "int" data type vary between microprocessor architectures and */
  41:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    even C compilers for the same microprocessor.  ThreadX does not     */
  42:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    directly use native C data types.  Instead, ThreadX creates its     */
  43:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    own special types that can be mapped to actual data types by this   */
  44:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    file to guarantee consistency in the interface and functionality.   */
  45:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  46:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    This file replaces the previous Cortex-M3/M4/M7 files. It unifies   */
  47:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    the ARMv7-M architecture and compilers into one common file.        */
  48:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  49:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  RELEASE HISTORY                                                       */
  50:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  51:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    DATE              NAME                      DESCRIPTION             */
  52:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  53:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  06-02-2021      Scott Larson            Initial Version 6.1.7         */
  54:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  01-31-2022      Scott Larson            Modified comments, updated    */
  55:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            typedef to fix misra        */
  56:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            violation,                  */
  57:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            fixed predefined macro,     */
  58:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            resulting in version 6.1.10 */
  59:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  04-25-2022      Scott Larson            Modified comments and added   */
  60:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            volatile to registers,      */
  61:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            resulting in version 6.1.11 */
  62:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  07-29-2022      Scott Larson            Modified comments and         */
  63:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            described BASEPRI usage,    */
  64:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            resulting in version 6.1.12 */
  65:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  66:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  67:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  68:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_PORT_H
  69:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_H
  70:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  71:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  72:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Determine if the optional ThreadX user define file should be used.  */
  73:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  74:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_INCLUDE_USER_DEFINE_FILE
  75:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  76:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Yes, include the user defines in tx_user.h. The defines in this file may
  77:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    alternately be defined on the command line.  */
  78:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  79:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include "tx_user.h"
  80:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  81:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  82:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  83:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define compiler library include files.  */
  84:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  C:\Users\HP\AppData\Local\Temp\ccIan0cE.s 			page 6


  85:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include <stdlib.h>
  86:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include <string.h>
  87:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  88:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ICCARM__
  89:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include <intrinsics.h>                     /* IAR Intrinsics */
  90:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define __asm__ __asm                       /* Define to make all inline asm look similar */
  91:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
  92:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include <yvals.h>
  93:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  94:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif /* __ICCARM__ */
  95:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  96:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ghs__
  97:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include <arm_ghs.h>
  98:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include "tx_ghs.h"
  99:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
 100:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 101:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 102:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #if !defined(__GNUC__) && !defined(__CC_ARM)
 103:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define __get_control_value __get_CONTROL
 104:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define __set_control_value __set_CONTROL
 105:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 106:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 107:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef __GNUC__
 108:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define __get_ipsr_value __get_IPSR
 109:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 110:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 111:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define ThreadX basic types for this port.  */
 112:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 113:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define VOID                                    void
 114:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef char                                    CHAR;
 115:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned char                           UCHAR;
 116:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef int                                     INT;
 117:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned int                            UINT;
 118:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef long                                    LONG;
 119:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned long                           ULONG;
 120:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned long long                      ULONG64;
 121:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef short                                   SHORT;
 122:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned short                          USHORT;
 123:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define ULONG64_DEFINED
 124:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 125:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the priority levels for ThreadX.  Legal values range
 126:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    from 32 to 1024 and MUST be evenly divisible by 32.  */
 127:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 128:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MAX_PRIORITIES
 129:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MAX_PRIORITIES                       32
 130:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 131:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 132:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 133:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the minimum stack for a ThreadX thread on this processor. If the size supplied during
 134:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    thread creation is less than this value, the thread create call will return an error.  */
 135:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 136:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MINIMUM_STACK
 137:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MINIMUM_STACK                        200         /* Minimum stack size for this port  */
 138:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 139:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 140:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 141:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the system timer thread's default stack size and priority.  These are only applicable
ARM GAS  C:\Users\HP\AppData\Local\Temp\ccIan0cE.s 			page 7


 142:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    if TX_TIMER_PROCESS_IN_ISR is not defined.  */
 143:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 144:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_STACK_SIZE
 145:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_STACK_SIZE              1024        /* Default timer thread stack size  */
 146:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 147:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 148:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_PRIORITY
 149:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_PRIORITY                0           /* Default timer thread priority    */
 150:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 151:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 152:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* By default, ThreadX for Cortex-M uses the PRIMASK register to enable/disable interrupts.
 153:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** If using BASEPRI is desired, define the following two symbols for both c and assembly files:
 154:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** TX_PORT_USE_BASEPRI - This tells ThreadX to use BASEPRI instead of PRIMASK.
 155:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** TX_PORT_BASEPRI = (priority_mask << (8 - number_priority_bits)) - this defines the maximum priority
 156:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** Any interrupt with a higher priority than priority_mask will not be masked, thus the interrupt will
 157:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** */
 158:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 159:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define various constants for the ThreadX Cortex-M port.  */
 160:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 161:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INT_DISABLE                          1           /* Disable interrupts               */
 162:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INT_ENABLE                           0           /* Enable interrupts                */
 163:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 164:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 165:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the clock source for trace event entry time stamp. The following two item are port specif
 166:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    For example, if the time source is at the address 0x0a800024 and is 16-bits in size, the clock
 167:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    source constants would be:
 168:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 169:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((volatile ULONG *) 0x0a800024)
 170:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0x0000FFFFUL
 171:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 172:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** */
 173:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 174:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 175:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_SOURCE
 176:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((volatile ULONG *) 0xE0001004)
 177:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 178:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 179:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG   _tx_misra_time_stamp_get(VOID);
 180:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    _tx_misra_time_stamp_get()
 181:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 182:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 183:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_MASK
 184:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0xFFFFFFFFUL
 185:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 186:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 187:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ghs__
 188:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define constants for Green Hills EventAnalyzer.  */
 189:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 190:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the number of ticks per second. This informs the EventAnalyzer what the timestamps
 191:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    represent.  By default, this is set to 1,000,000 i.e., one tick every microsecond. */
 192:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 193:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EL_TICKS_PER_SECOND                  1000000
 194:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 195:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the method of how to get the upper and lower 32-bits of the time stamp. By default, simpl
 196:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    simulate the time-stamp source with a counter.  */
 197:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 198:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define read_tbu()                              _tx_el_time_base_upper
ARM GAS  C:\Users\HP\AppData\Local\Temp\ccIan0cE.s 			page 8


 199:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define read_tbl()                              ++_tx_el_time_base_lower
 200:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
 201:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 202:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the port specific options for the _tx_build_options variable. This variable indicates
 203:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    how the ThreadX library was built.  */
 204:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 205:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_BUILD_OPTIONS          (0)
 206:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 207:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 208:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the in-line initialization constant so that modules with in-line
 209:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    initialization capabilities can prevent their initialization from being
 210:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    a function call.  */
 211:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 212:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 213:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_DISABLE_INLINE
 214:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 215:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INLINE_INITIALIZATION
 216:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 217:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 218:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 219:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Determine whether or not stack checking is enabled. By default, ThreadX stack checking is
 220:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    disabled. When the following is defined, ThreadX thread stack checking is enabled.  If stack
 221:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    checking is enabled (TX_ENABLE_STACK_CHECKING is defined), the TX_DISABLE_STACK_FILLING
 222:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    define is negated, thereby forcing the stack fill which is necessary for the stack checking
 223:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    logic.  */
 224:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 225:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 226:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_ENABLE_STACK_CHECKING
 227:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #undef TX_DISABLE_STACK_FILLING
 228:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 229:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 230:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 231:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 232:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the TX_THREAD control block extensions for this port. The main reason
 233:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    for the multiple macros is so that backward compatibility can be maintained with
 234:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    existing ThreadX kernel awareness modules.  */
 235:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 236:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_0
 237:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_1
 238:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 239:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID    *tx_thread_iar_tls_pointer;
 240:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ghs__)
 241:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID *  tx_thread_eh_globals;                           \
 242:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                         int     Errno;             /* errno.  */                \
 243:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                         char *  strtok_saved_pos;  /* strtok() position.  */
 244:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 245:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2
 246:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 247:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 248:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 249:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_3
 250:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 251:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 252:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 253:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the port extensions of the remaining ThreadX objects.  */
 254:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 255:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_EXTENSION
ARM GAS  C:\Users\HP\AppData\Local\Temp\ccIan0cE.s 			page 9


 256:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_EXTENSION
 257:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_EXTENSION
 258:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_EXTENSION
 259:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_EXTENSION
 260:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_EXTENSION
 261:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_EXTENSION
 262:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 263:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 264:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the user extension field of the thread control block.  Nothing
 265:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    additional is needed for this port so it is defined as white space.  */
 266:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 267:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_USER_EXTENSION
 268:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_USER_EXTENSION
 269:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 270:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 271:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 272:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the macros for processing extensions in tx_thread_create, tx_thread_delete,
 273:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    tx_thread_shell_entry, and tx_thread_terminate.  */
 274:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 275:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 276:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 277:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #if (__VER__ < 8000000)
 278:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 279:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      __iar_dlib_perthread_deallocate
 280:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     thread_ptr -> tx_thread_iar_tls
 281:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               __iar_dlib_perthread_access(0);
 282:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 283:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void    *_tx_iar_create_per_thread_tls_area(void);
 284:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void    _tx_iar_destroy_per_thread_tls_area(void *tls_ptr);
 285:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void    __iar_Initlocks(void);
 286:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 287:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 288:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      do {_tx_iar_destroy_per_thread_
 289:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                         thread_ptr -> tx_thread_iar
 290:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               do {__iar_Initlocks();} while(0
 291:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 292:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 293:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)
 294:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)
 295:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 296:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 297:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #if defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_FPU_VFP)
 298:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 299:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 300:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 301:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  _tx_misra_control_get(void);
 302:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void   _tx_misra_control_set(ULONG value);
 303:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  _tx_misra_fpccr_get(void);
 304:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void   _tx_misra_vfp_touch(void);
 305:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 306:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE not defined */
 307:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 308:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define some helper functions (these are intrinsics in some compilers). */
 309:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __GNUC__ /* GCC and ARM Compiler 6 */
 310:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 311:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline ULONG __get_control_value(void)
 312:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
ARM GAS  C:\Users\HP\AppData\Local\Temp\ccIan0cE.s 			page 10


 313:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  control_value;
 314:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 315:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 316:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 317:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 318:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 319:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_control_value(ULONG control_value)
 320:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 321:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 322:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 323:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 324:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 325:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 326:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* ARM Compiler 5 */
 327:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 328:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) ULONG __get_control_value(void)
 329:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 330:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  control_value;
 331:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 332:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm volatile ("MRS control_value,CONTROL");
 333:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 334:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 335:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 336:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) void __set_control_value(ULONG control_value)
 337:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 338:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR CONTROL,control_value");
 339:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 340:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Can't access VFP registers with inline asm, so define this in tx_thread_schedule.  */
 341:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void _tx_vfp_access(void);
 342:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  _tx_vfp_access();
 343:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 344:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)  /* IAR */
 345:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 346:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* Helper functions for different compilers */
 347:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 348:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 349:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 350:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 351:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* A completed thread falls into _thread_shell_entry and we can simply deactivate the FPU via CONTR
 352:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    in order to ensure no lazy stacking will occur. */
 353:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 354:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 355:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 356:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 357:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 358:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  __get_control_value();    
 359:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 360:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         __set_control_value(_tx_vfp_state);        
 361:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 362:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 363:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 364:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 365:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 366:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_misra_control_get();  
 367:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 368:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_misra_control_set(_tx_vfp_state);      
 369:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
ARM GAS  C:\Users\HP\AppData\Local\Temp\ccIan0cE.s 			page 11


 370:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 371:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 372:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 373:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* A thread can be terminated by another thread, so we first check if it's self-terminating and not
 374:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    If so, deactivate the FPU via CONTROL.FPCA. Otherwise we are in an interrupt or another thread i
 375:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    this one, so if the FPCCR.LSPACT bit is set, we need to save the CONTROL.FPCA state, touch the F
 376:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    the lazy FPU save, then restore the CONTROL.FPCA state. */
 377:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 378:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 379:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 380:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 381:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 382:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 383:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 384:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 385:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 386:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  __get_control_value();
 387:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 388:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             __set_control_value(_tx_vfp_state);    
 389:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 390:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         else                                       
 391:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 392:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 393:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  *((volatile ULONG *) 0xE00
 394:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 395:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 396:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             {                                      
 397:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 398:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = __get_control_value
 399:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 400:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 TX_VFP_TOUCH();                    
 401:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 402:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 {                                  
 403:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  __get_control_
 404:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 405:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     __set_control_value(_tx_vfp_sta
 406:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 }                                  
 407:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             }                                      
 408:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 409:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 410:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 411:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 412:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 413:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 414:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 415:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 416:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 417:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 418:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_misra_control_get(
 419:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 420:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_misra_control_set(_tx_vfp_state);  
 421:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 422:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         else                                       
 423:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 424:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 425:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_misra_fpccr_get();    
 426:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
ARM GAS  C:\Users\HP\AppData\Local\Temp\ccIan0cE.s 			page 12


 427:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 428:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             {                                      
 429:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 430:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = _tx_misra_control_g
 431:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 432:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_misra_vfp_touch();             
 433:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 434:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 {                                  
 435:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_misra_cont
 436:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 437:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_misra_control_set(_tx_vfp_s
 438:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 }                                  
 439:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             }                                      
 440:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 441:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 442:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 443:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 444:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* No VFP in use */
 445:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 446:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 447:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)
 448:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 449:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_F
 450:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 451:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 452:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the ThreadX object creation extensions for the remaining objects.  */
 453:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 454:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_CREATE_EXTENSION(pool_ptr)
 455:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_CREATE_EXTENSION(pool_ptr)
 456:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_CREATE_EXTENSION(group_ptr)
 457:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_CREATE_EXTENSION(mutex_ptr)
 458:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_CREATE_EXTENSION(queue_ptr)
 459:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_CREATE_EXTENSION(semaphore_ptr)
 460:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_CREATE_EXTENSION(timer_ptr)
 461:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 462:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 463:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the ThreadX object deletion extensions for the remaining objects.  */
 464:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 465:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_DELETE_EXTENSION(pool_ptr)
 466:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_DELETE_EXTENSION(pool_ptr)
 467:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_DELETE_EXTENSION(group_ptr)
 468:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_DELETE_EXTENSION(mutex_ptr)
 469:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_DELETE_EXTENSION(queue_ptr)
 470:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_DELETE_EXTENSION(semaphore_ptr)
 471:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_DELETE_EXTENSION(timer_ptr)
 472:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 473:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 474:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the get system state macro.  */
 475:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 476:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_GET_SYSTEM_STATE
 477:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 478:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 479:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __CC_ARM /* ARM Compiler 5 */
 480:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 481:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** register unsigned int _ipsr __asm("ipsr");
 482:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _ipsr)
 483:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  C:\Users\HP\AppData\Local\Temp\ccIan0cE.s 			page 13


 484:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and ARM Compiler 6 */
 485:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 486:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_ipsr_value(void)
 487:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 488:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int  ipsr_value;
 489:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 490:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(ipsr_value);
 491:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 492:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 493:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_ipsr_value())
 494:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 495:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)   /* IAR */
 496:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 497:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_IPSR())
 498:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 499:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE for different compilers */
 500:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 501:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE is defined, use MISRA function. */
 502:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG   _tx_misra_ipsr_get(VOID);
 503:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _tx_misra_ipsr_get())
 504:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 505:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE */
 506:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 507:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 508:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the check for whether or not to call the _tx_thread_system_return function.  A non-zero v
 509:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    indicates that _tx_thread_system_return should not be called. This overrides the definition in t
 510:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    for Cortex-M since so we don't waste time checking the _tx_thread_system_state variable that is 
 511:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    zero after initialization for Cortex-M ports. */
 512:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 513:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_SYSTEM_RETURN_CHECK
 514:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_SYSTEM_RETURN_CHECK(c)    (c) = ((ULONG) _tx_thread_preempt_disable);
 515:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 516:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 517:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the macro to ensure _tx_thread_preempt_disable is set early in initialization in order to
 518:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    prevent early scheduling on Cortex-M parts.  */
 519:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 520:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_POST_INITIALIZATION    _tx_thread_preempt_disable++;
 521:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 522:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 523:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 524:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 525:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_DISABLE_INLINE
 526:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 527:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the TX_LOWEST_SET_BIT_CALCULATE macro for each compiler. */
 528:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ICCARM__       /* IAR Compiler */
 529:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __CLZ(__RBIT((m)));
 530:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* AC5 Compiler */
 531:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __clz(__rbit((m)));
 532:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and AC6 Compiler */
 533:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       __asm__ volatile (" RBIT %0,%1 ": "=r" (m) : "r" (m
 534:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                 __asm__ volatile (" CLZ  %0,%1 ": "=r" (b) : "r" (m
 535:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 536:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 537:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 538:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 539:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the interrupt disable/restore macros for each compiler. */
 540:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  C:\Users\HP\AppData\Local\Temp\ccIan0cE.s 			page 14


 541:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #if defined(__GNUC__) || defined(__ICCARM__)
 542:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 543:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*** GCC/AC6 and IAR ***/
 544:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 545:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_interrupt_posture(void)
 546:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 547:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int posture;
 548:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 549:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
 550:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 551:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 552:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 553:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(posture);
 554:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 555:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 556:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 557:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_basepri_value(unsigned int basepri_valu
 558:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 559:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  BASEPRI,%0 ": : "r" (basepri_value));
 560:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 561:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 562:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __enable_interrupts(void)
 563:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 564:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSIE  i": : : "memory");
 565:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 566:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 567:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 568:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __restore_interrupt(unsigned int int_posture)
 569:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 570:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 571:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __set_basepri_value(int_posture);
 572:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     //__asm__ volatile ("MSR  BASEPRI,%0": : "r" (int_posture): "memory");
 573:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 574:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 575:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 576:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 577:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 578:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
  61              		.loc 2 578 63 view .LVU12
  62              	.LBB13:
 579:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 580:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int int_posture;
  63              		.loc 2 580 1 view .LVU13
 581:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 582:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     int_posture = __get_interrupt_posture();
  64              		.loc 2 582 5 view .LVU14
  65              	.LBB14:
  66              	.LBI14:
 545:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
  67              		.loc 2 545 63 view .LVU15
  68              	.LBB15:
 547:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
  69              		.loc 2 547 1 view .LVU16
 551:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  70              		.loc 2 551 5 view .LVU17
  71              		.syntax unified
  72              	@ 551 "Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h" 1
ARM GAS  C:\Users\HP\AppData\Local\Temp\ccIan0cE.s 			page 15


  73 0008 EFF31085 		MRS  r5, PRIMASK 
  74              	@ 0 "" 2
  75              	.LVL3:
 553:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
  76              		.loc 2 553 5 view .LVU18
 553:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
  77              		.loc 2 553 5 is_stmt 0 view .LVU19
  78              		.thumb
  79              		.syntax unified
  80              	.LBE15:
  81              	.LBE14:
 583:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 584:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 585:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __set_basepri_value(TX_PORT_BASEPRI);
 586:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 587:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSID i" : : : "memory");
  82              		.loc 2 587 5 is_stmt 1 view .LVU20
  83              		.syntax unified
  84              	@ 587 "Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h" 1
  85 000c 72B6     		CPSID i
  86              	@ 0 "" 2
 588:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 589:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(int_posture);
  87              		.loc 2 589 5 view .LVU21
  88              	.LVL4:
  89              		.loc 2 589 5 is_stmt 0 view .LVU22
  90              		.thumb
  91              		.syntax unified
  92              	.LBE13:
  93              	.LBE12:
 143:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
 144:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     /* We can only transfer when the device is ATTACHED, ADDRESSED OR CONFIGURED.  */
 145:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     if ((device -> ux_device_state == UX_DEVICE_ATTACHED) || (device -> ux_device_state == UX_DEVIC
  94              		.loc 1 145 5 is_stmt 1 view .LVU23
  95              		.loc 1 145 17 is_stmt 0 view .LVU24
  96 000e BB68     		ldr	r3, [r7, #8]
 146:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****             || (device -> ux_device_state == UX_DEVICE_CONFIGURED))
  97              		.loc 1 146 13 view .LVU25
  98 0010 013B     		subs	r3, r3, #1
 145:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****             || (device -> ux_device_state == UX_DEVICE_CONFIGURED))
  99              		.loc 1 145 8 view .LVU26
 100 0012 022B     		cmp	r3, #2
 101 0014 1DD8     		bhi	.L2
 102 0016 0446     		mov	r4, r0
 147:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     {
 148:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
 149:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         /* Set the transfer to pending.  */
 150:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         transfer_request -> ux_transfer_request_completion_code =  UX_TRANSFER_STATUS_PENDING;
 103              		.loc 1 150 9 is_stmt 1 view .LVU27
 104              		.loc 1 150 65 is_stmt 0 view .LVU28
 105 0018 0123     		movs	r3, #1
 106 001a 4363     		str	r3, [r0, #52]
 151:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** #if !defined(UX_HOST_STANDALONE)
 152:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         /* Save the thread making this transfer. If we're under interrupt, this
 153:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****            will be null.  */
 154:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         transfer_request -> ux_transfer_request_thread_pending =  _ux_utility_thread_identify();
 107              		.loc 1 154 9 is_stmt 1 view .LVU29
ARM GAS  C:\Users\HP\AppData\Local\Temp\ccIan0cE.s 			page 16


 108              		.loc 1 154 67 is_stmt 0 view .LVU30
 109 001c FFF7FEFF 		bl	_ux_utility_thread_identify
 110              	.LVL5:
 111              		.loc 1 154 64 view .LVU31
 112 0020 2066     		str	r0, [r4, #96]
 155:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** #endif
 156:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     }
 157:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     else
 158:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     {
 159:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
 160:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         /* The device is in an invalid state. Restore interrupts and return error.  */
 161:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         UX_RESTORE
 162:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
 163:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         /* Check if this is endpoint 0.  */
 164:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         if ((endpoint -> ux_endpoint_descriptor.bEndpointAddress & (UINT)~UX_ENDPOINT_DIRECTION) ==
 165:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         {
 166:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
 167:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****             /* Check if the class has already protected it.  */
 168:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****             if (!_ux_host_semaphore_waiting(&device -> ux_device_protection_semaphore))
 169:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****             {
 170:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
 171:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****                 /* Class is using endpoint 0. Unprotect semaphore.  */
 172:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****                 _ux_host_semaphore_put(&device -> ux_device_protection_semaphore);
 173:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****             }
 174:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         }
 175:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
 176:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         return(UX_TRANSFER_NOT_READY);
 177:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     }
 178:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
 179:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     /* Restore interrupts.  */
 180:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     UX_RESTORE
 113              		.loc 1 180 5 is_stmt 1 view .LVU32
 114              	.LVL6:
 115              	.LBB16:
 116              	.LBI16:
 568:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 117              		.loc 2 568 55 view .LVU33
 118              	.LBB17:
 574:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 119              		.loc 2 574 5 view .LVU34
 120              		.syntax unified
 121              	@ 574 "Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h" 1
 122 0022 85F31088 		MSR  PRIMASK,r5
 123              	@ 0 "" 2
 124              	.LVL7:
 574:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 125              		.loc 2 574 5 is_stmt 0 view .LVU35
 126              		.thumb
 127              		.syntax unified
 128              	.LBE17:
 129              	.LBE16:
 181:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
 182:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     /* If trace is enabled, insert this event into the trace buffer.  */
 183:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     UX_TRACE_IN_LINE_INSERT(UX_TRACE_HOST_STACK_TRANSFER_REQUEST, device, endpoint, transfer_reques
 184:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     
 185:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     /* With the device we have the pointer to the HCD.  */
 186:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     hcd = UX_DEVICE_HCD_GET(device);
ARM GAS  C:\Users\HP\AppData\Local\Temp\ccIan0cE.s 			page 17


 130              		.loc 1 186 5 is_stmt 1 view .LVU36
 131              		.loc 1 186 11 is_stmt 0 view .LVU37
 132 0026 1B4B     		ldr	r3, .L10
 133 0028 1B68     		ldr	r3, [r3]
 134              		.loc 1 186 9 view .LVU38
 135 002a D3F80C80 		ldr	r8, [r3, #12]
 136              	.LVL8:
 187:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
 188:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     /* If this is endpoint 0, we protect the endpoint from a possible re-entry.  */
 189:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     if ((endpoint -> ux_endpoint_descriptor.bEndpointAddress & (UINT)~UX_ENDPOINT_DIRECTION) == 0)
 137              		.loc 1 189 5 is_stmt 1 view .LVU39
 138              		.loc 1 189 44 is_stmt 0 view .LVU40
 139 002e 7369     		ldr	r3, [r6, #20]
 140              		.loc 1 189 8 view .LVU41
 141 0030 33F08003 		bics	r3, r3, #128
 142 0034 1CD0     		beq	.L3
 143              	.LVL9:
 144              	.L4:
 190:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     {
 191:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
 192:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         /* Check if the class has already protected it.  */
 193:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         if (_ux_host_semaphore_waiting(&device -> ux_device_protection_semaphore))        
 194:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         {
 195:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
 196:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****             /* We are using endpoint 0. Protect with semaphore.  */
 197:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****             status =  _ux_host_semaphore_get(&device -> ux_device_protection_semaphore, UX_WAIT_FOR
 198:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     
 199:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****             /* Check for status.  */
 200:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****             if (status != UX_SUCCESS)
 201:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****             
 202:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****                 /* Something went wrong. */
 203:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****                 return(status);
 204:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         }        
 205:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     }             
 206:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     
 207:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     /* Send the command to the controller.  */    
 208:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     status =  hcd -> ux_hcd_entry_function(hcd, UX_HCD_TRANSFER_REQUEST, transfer_request);
 145              		.loc 1 208 5 is_stmt 1 view .LVU42
 146              		.loc 1 208 19 is_stmt 0 view .LVU43
 147 0036 D8F87030 		ldr	r3, [r8, #112]
 148              		.loc 1 208 15 view .LVU44
 149 003a 2246     		mov	r2, r4
 150 003c 0C21     		movs	r1, #12
 151 003e 4046     		mov	r0, r8
 152 0040 9847     		blx	r3
 153              	.LVL10:
 154 0042 0546     		mov	r5, r0
 155              	.LVL11:
 209:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
 210:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     /* If this is endpoint 0, we unprotect the endpoint. */
 211:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     if ((endpoint -> ux_endpoint_descriptor.bEndpointAddress & (UINT)~UX_ENDPOINT_DIRECTION) == 0)
 156              		.loc 1 211 5 is_stmt 1 view .LVU45
 157              		.loc 1 211 44 is_stmt 0 view .LVU46
 158 0044 7369     		ldr	r3, [r6, #20]
 159              		.loc 1 211 8 view .LVU47
 160 0046 33F08003 		bics	r3, r3, #128
 161 004a 1ED0     		beq	.L8
ARM GAS  C:\Users\HP\AppData\Local\Temp\ccIan0cE.s 			page 18


 162              	.LVL12:
 163              	.L1:
 212:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
 213:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         /* We are using endpoint 0. Unprotect with semaphore.  */
 214:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         _ux_host_semaphore_put(&device -> ux_device_protection_semaphore);
 215:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
 216:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     /* And return the status.  */
 217:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     return(status);
 218:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** #endif
 219:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** }
 164              		.loc 1 219 1 view .LVU48
 165 004c 2846     		mov	r0, r5
 166 004e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 167              	.LVL13:
 168              	.L2:
 161:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
 169              		.loc 1 161 9 is_stmt 1 view .LVU49
 170              	.LBB18:
 171              	.LBI18:
 568:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 172              		.loc 2 568 55 view .LVU50
 173              	.LBB19:
 574:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 174              		.loc 2 574 5 view .LVU51
 175              		.syntax unified
 176              	@ 574 "Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h" 1
 177 0052 85F31088 		MSR  PRIMASK,r5
 178              	@ 0 "" 2
 179              	.LVL14:
 574:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 180              		.loc 2 574 5 is_stmt 0 view .LVU52
 181              		.thumb
 182              		.syntax unified
 183              	.LBE19:
 184              	.LBE18:
 164:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         {
 185              		.loc 1 164 9 is_stmt 1 view .LVU53
 164:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         {
 186              		.loc 1 164 48 is_stmt 0 view .LVU54
 187 0056 7369     		ldr	r3, [r6, #20]
 164:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         {
 188              		.loc 1 164 12 view .LVU55
 189 0058 33F08003 		bics	r3, r3, #128
 190 005c 01D1     		bne	.L5
 168:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****             {
 191              		.loc 1 168 13 is_stmt 1 view .LVU56
 168:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****             {
 192              		.loc 1 168 18 is_stmt 0 view .LVU57
 193 005e FB6A     		ldr	r3, [r7, #44]
 168:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****             {
 194              		.loc 1 168 16 view .LVU58
 195 0060 0BB1     		cbz	r3, .L9
 196              	.LVL15:
 197              	.L5:
 176:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     }
 198              		.loc 1 176 9 is_stmt 1 view .LVU59
 176:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     }
ARM GAS  C:\Users\HP\AppData\Local\Temp\ccIan0cE.s 			page 19


 199              		.loc 1 176 15 is_stmt 0 view .LVU60
 200 0062 2525     		movs	r5, #37
 201              	.LVL16:
 176:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     }
 202              		.loc 1 176 15 view .LVU61
 203 0064 F2E7     		b	.L1
 204              	.LVL17:
 205              	.L9:
 172:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****             }
 206              		.loc 1 172 17 is_stmt 1 view .LVU62
 207 0066 07F12400 		add	r0, r7, #36
 208              	.LVL18:
 172:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****             }
 209              		.loc 1 172 17 is_stmt 0 view .LVU63
 210 006a FFF7FEFF 		bl	_ux_utility_semaphore_put
 211              	.LVL19:
 212 006e F8E7     		b	.L5
 213              	.LVL20:
 214              	.L3:
 193:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         {
 215              		.loc 1 193 9 is_stmt 1 view .LVU64
 193:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         {
 216              		.loc 1 193 13 is_stmt 0 view .LVU65
 217 0070 FB6A     		ldr	r3, [r7, #44]
 193:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****         {
 218              		.loc 1 193 12 view .LVU66
 219 0072 002B     		cmp	r3, #0
 220 0074 DFD0     		beq	.L4
 197:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     
 221              		.loc 1 197 13 is_stmt 1 view .LVU67
 197:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****     
 222              		.loc 1 197 23 is_stmt 0 view .LVU68
 223 0076 4FF0FF31 		mov	r1, #-1
 224 007a 07F12400 		add	r0, r7, #36
 225 007e FFF7FEFF 		bl	_ux_utility_semaphore_get
 226              	.LVL21:
 200:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****             
 227              		.loc 1 200 13 is_stmt 1 view .LVU69
 200:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****             
 228              		.loc 1 200 16 is_stmt 0 view .LVU70
 229 0082 0546     		mov	r5, r0
 230              	.LVL22:
 200:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c ****             
 231              		.loc 1 200 16 view .LVU71
 232 0084 0028     		cmp	r0, #0
 233 0086 D6D0     		beq	.L4
 234 0088 E0E7     		b	.L1
 235              	.L8:
 214:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
 236              		.loc 1 214 9 is_stmt 1 view .LVU72
 237 008a 07F12400 		add	r0, r7, #36
 238              	.LVL23:
 214:Middlewares/ST/usbx/common/core/src/ux_host_stack_transfer_request.c **** 
 239              		.loc 1 214 9 is_stmt 0 view .LVU73
 240 008e FFF7FEFF 		bl	_ux_utility_semaphore_put
 241              	.LVL24:
 242 0092 DBE7     		b	.L1
ARM GAS  C:\Users\HP\AppData\Local\Temp\ccIan0cE.s 			page 20


 243              	.L11:
 244              		.align	2
 245              	.L10:
 246 0094 00000000 		.word	_ux_system_host
 247              		.cfi_endproc
 248              	.LFE11:
 250              		.text
 251              	.Letext0:
 252              		.file 3 "Middlewares/ST/threadx/common/inc/tx_api.h"
 253              		.file 4 "Middlewares/ST/usbx/common/core/inc/ux_api.h"
 254              		.file 5 "Middlewares/ST/usbx/common/core/inc/ux_system.h"
 255              		.file 6 "Middlewares/ST/usbx/common/core/inc/ux_utility.h"
ARM GAS  C:\Users\HP\AppData\Local\Temp\ccIan0cE.s 			page 21


DEFINED SYMBOLS
                            *ABS*:00000000 ux_host_stack_transfer_request.c
C:\Users\HP\AppData\Local\Temp\ccIan0cE.s:20     .text._ux_host_stack_transfer_request:00000000 $t
C:\Users\HP\AppData\Local\Temp\ccIan0cE.s:26     .text._ux_host_stack_transfer_request:00000000 _ux_host_stack_transfer_request
C:\Users\HP\AppData\Local\Temp\ccIan0cE.s:246    .text._ux_host_stack_transfer_request:00000094 $d

UNDEFINED SYMBOLS
_ux_utility_thread_identify
_ux_utility_semaphore_put
_ux_utility_semaphore_get
_ux_system_host
