ARM GAS  C:\Users\HP\AppData\Local\Temp\cchmVhmR.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"txe_byte_pool_create.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text._txe_byte_pool_create,"ax",%progbits
  20              		.align	1
  21              		.global	_txe_byte_pool_create
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	_txe_byte_pool_create:
  27              	.LVL0:
  28              	.LFB8:
  29              		.file 1 "Middlewares/ST/threadx/common/src/txe_byte_pool_create.c"
   1:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /**************************************************************************/
   2:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*                                                                        */
   3:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*                                                                        */
   5:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*       This software is licensed under the Microsoft Software License   */
   6:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*       and in the root directory of this software.                      */
   9:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*                                                                        */
  10:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /**************************************************************************/
  11:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
  12:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
  13:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /**************************************************************************/
  14:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /**************************************************************************/
  15:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /**                                                                       */
  16:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /** ThreadX Component                                                     */
  17:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /**                                                                       */
  18:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /**   Byte Pool                                                           */
  19:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /**                                                                       */
  20:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /**************************************************************************/
  21:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /**************************************************************************/
  22:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
  23:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** #define TX_SOURCE_CODE
  24:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
  25:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
  26:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /* Include necessary system files.  */
  27:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
  28:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** #include "tx_api.h"
  29:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** #include "tx_initialize.h"
ARM GAS  C:\Users\HP\AppData\Local\Temp\cchmVhmR.s 			page 2


  30:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** #include "tx_thread.h"
  31:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** #include "tx_timer.h"
  32:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** #include "tx_byte_pool.h"
  33:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
  34:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
  35:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /**************************************************************************/
  36:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*                                                                        */
  37:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*  FUNCTION                                               RELEASE        */
  38:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*                                                                        */
  39:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*    _txe_byte_pool_create                               PORTABLE C      */
  40:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*                                                           6.1          */
  41:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*  AUTHOR                                                                */
  42:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*                                                                        */
  43:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*    William E. Lamie, Microsoft Corporation                             */
  44:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*                                                                        */
  45:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*  DESCRIPTION                                                           */
  46:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*                                                                        */
  47:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*    This function checks for errors in the create byte pool memory      */
  48:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*    function.                                                           */
  49:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*                                                                        */
  50:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*  INPUT                                                                 */
  51:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*                                                                        */
  52:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*    pool_ptr                          Pointer to pool control block     */
  53:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*    name_ptr                          Pointer to byte pool name         */
  54:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*    pool_start                        Address of beginning of pool area */
  55:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*    pool_size                         Number of bytes in the byte pool  */
  56:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*    pool_control_block_size           Size of byte pool control block   */
  57:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*                                                                        */
  58:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*  OUTPUT                                                                */
  59:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*                                                                        */
  60:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*    TX_POOL_ERROR                     Invalid byte pool pointer         */
  61:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*    TX_PTR_ERROR                      Invalid pool starting address     */
  62:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*    TX_SIZE_ERROR                     Invalid pool size                 */
  63:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*    TX_CALLER_ERROR                   Invalid caller of this function   */
  64:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*    status                            Actual completion status          */
  65:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*                                                                        */
  66:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*  CALLS                                                                 */
  67:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*                                                                        */
  68:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*    _tx_byte_pool_create              Actual byte pool create function  */
  69:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*    _tx_thread_system_preempt_check   Check for preemption              */
  70:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*                                                                        */
  71:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*  CALLED BY                                                             */
  72:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*                                                                        */
  73:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*    Application Code                                                    */
  74:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*                                                                        */
  75:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*  RELEASE HISTORY                                                       */
  76:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*                                                                        */
  77:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*    DATE              NAME                      DESCRIPTION             */
  78:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*                                                                        */
  79:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*  05-19-2020     William E. Lamie         Initial Version 6.0           */
  80:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
  81:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*                                            resulting in version 6.1    */
  82:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /*                                                                        */
  83:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** /**************************************************************************/
  84:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_si
  85:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** {
  30              		.loc 1 85 1 view -0
ARM GAS  C:\Users\HP\AppData\Local\Temp\cchmVhmR.s 			page 3


  31              		.cfi_startproc
  32              		@ args = 4, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  86:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
  87:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** TX_INTERRUPT_SAVE_AREA
  34              		.loc 1 87 1 view .LVU1
  88:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
  89:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** UINT            status;
  35              		.loc 1 89 1 view .LVU2
  90:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** ULONG           i;
  36              		.loc 1 90 1 view .LVU3
  91:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** TX_BYTE_POOL    *next_pool;
  37              		.loc 1 91 1 view .LVU4
  92:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** #ifndef TX_TIMER_PROCESS_IN_ISR
  93:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** TX_THREAD       *thread_ptr;
  38              		.loc 1 93 1 view .LVU5
  94:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** #endif
  95:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
  96:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
  97:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****     /* Default status to success.  */
  98:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****     status =  TX_SUCCESS;
  39              		.loc 1 98 5 view .LVU6
  99:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
 100:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****     /* Check for an invalid byte pool pointer.  */
 101:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****     if (pool_ptr == TX_NULL)
  40              		.loc 1 101 5 view .LVU7
  41              		.loc 1 101 8 is_stmt 0 view .LVU8
  42 0000 0028     		cmp	r0, #0
  43 0002 50D0     		beq	.L8
  85:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
  44              		.loc 1 85 1 view .LVU9
  45 0004 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
  46              	.LCFI0:
  47              		.cfi_def_cfa_offset 32
  48              		.cfi_offset 3, -32
  49              		.cfi_offset 4, -28
  50              		.cfi_offset 5, -24
  51              		.cfi_offset 6, -20
  52              		.cfi_offset 7, -16
  53              		.cfi_offset 8, -12
  54              		.cfi_offset 9, -8
  55              		.cfi_offset 14, -4
  56 0008 8946     		mov	r9, r1
  57 000a 1746     		mov	r7, r2
  58 000c 9846     		mov	r8, r3
  59 000e 0646     		mov	r6, r0
 102:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****     {
 103:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
 104:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         /* Byte pool pointer is invalid, return appropriate error code.  */
 105:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         status =  TX_POOL_ERROR;
 106:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****     }
 107:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
 108:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****     /* Now see if the pool control block size is valid.  */
 109:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****     else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
  60              		.loc 1 109 10 is_stmt 1 view .LVU10
  61              		.loc 1 109 13 is_stmt 0 view .LVU11
  62 0010 089B     		ldr	r3, [sp, #32]
ARM GAS  C:\Users\HP\AppData\Local\Temp\cchmVhmR.s 			page 4


  63              	.LVL1:
  64              		.loc 1 109 13 view .LVU12
  65 0012 342B     		cmp	r3, #52
  66 0014 02D0     		beq	.L19
 110:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****     {
 111:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
 112:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         /* Byte pool pointer is invalid, return appropriate error code.  */
 113:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         status =  TX_POOL_ERROR;
  67              		.loc 1 113 16 view .LVU13
  68 0016 0220     		movs	r0, #2
  69              	.LVL2:
  70              	.L1:
 114:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****     }
 115:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****     else
 116:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****     {
 117:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
 118:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         /* Disable interrupts.  */
 119:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         TX_DISABLE
 120:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
 121:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         /* Increment the preempt disable flag.  */
 122:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         _tx_thread_preempt_disable++;
 123:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
 124:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         /* Restore interrupts.  */
 125:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         TX_RESTORE
 126:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
 127:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         /* Next see if it is already in the created list.  */
 128:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         next_pool =   _tx_byte_pool_created_ptr;
 129:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 130:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         {
 131:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
 132:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****             /* Determine if this byte pool matches the pool in the list.  */
 133:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****             if (pool_ptr == next_pool)
 134:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****             {
 135:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
 136:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****                 break;
 137:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****             }
 138:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****             else
 139:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****             {
 140:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
 141:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****                 /* Move to the next pool.  */
 142:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****                 next_pool =  next_pool -> tx_byte_pool_created_next;
 143:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****             }
 144:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         }
 145:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
 146:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         /* Disable interrupts.  */
 147:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         TX_DISABLE
 148:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
 149:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         /* Decrement the preempt disable flag.  */
 150:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         _tx_thread_preempt_disable--;
 151:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
 152:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         /* Restore interrupts.  */
 153:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         TX_RESTORE
 154:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
 155:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         /* Check for preemption.  */
 156:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         _tx_thread_system_preempt_check();
 157:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
 158:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         /* At this point, check to see if there is a duplicate pool.  */
ARM GAS  C:\Users\HP\AppData\Local\Temp\cchmVhmR.s 			page 5


 159:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         if (pool_ptr == next_pool)
 160:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         {
 161:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
 162:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****             /* Pool is already created, return appropriate error code.  */
 163:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****             status =  TX_POOL_ERROR;
 164:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         }
 165:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
 166:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         /* Check for an invalid starting address.  */
 167:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         else if (pool_start == TX_NULL)
 168:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         {
 169:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
 170:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****             /* Null starting address pointer, return appropriate error.  */
 171:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****             status =  TX_PTR_ERROR;
 172:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         }
 173:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
 174:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         /* Check for invalid pool size.  */
 175:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         else if (pool_size < TX_BYTE_POOL_MIN)
 176:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         {
 177:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
 178:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****             /* Pool not big enough, return appropriate error.  */
 179:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****             status =  TX_SIZE_ERROR;
 180:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         }
 181:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         else
 182:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         {
 183:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
 184:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** #ifndef TX_TIMER_PROCESS_IN_ISR
 185:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
 186:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****             /* Pickup thread pointer.  */
 187:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****             TX_THREAD_GET_CURRENT(thread_ptr)
 188:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
 189:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****             /* Check for invalid caller of this function.  First check for a calling thread.  */
 190:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****             if (thread_ptr == &_tx_timer_thread)
 191:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****             {
 192:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
 193:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****                 /* Invalid caller of this function, return appropriate error code.  */
 194:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****                 status =  TX_CALLER_ERROR;
 195:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****             }
 196:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** #endif
 197:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
 198:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****             /* Check for interrupt call.  */
 199:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****             if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 200:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****             {
 201:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
 202:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****                 /* Now, make sure the call is from an interrupt and not initialization.  */
 203:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****                 if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 204:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****                 {
 205:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
 206:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****                     /* Invalid caller of this function, return appropriate error code.  */
 207:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****                     status =  TX_CALLER_ERROR;
 208:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****                 }
 209:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****             }
 210:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         }
 211:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****     }
 212:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
 213:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****     /* Determine if everything is okay.  */
 214:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****     if (status == TX_SUCCESS)
 215:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****     {
ARM GAS  C:\Users\HP\AppData\Local\Temp\cchmVhmR.s 			page 6


 216:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
 217:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         /* Call actual byte pool create function.  */
 218:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 219:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****     }
 220:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
 221:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****     /* Return completion status.  */
 222:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****     return(status);
 223:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** }
  71              		.loc 1 223 1 view .LVU14
  72 0018 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
  73              	.LVL3:
  74              	.L19:
 119:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
  75              		.loc 1 119 9 is_stmt 1 view .LVU15
  76              	.LBB20:
  77              	.LBI20:
  78              		.file 2 "Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h"
   1:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
   2:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
   3:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*       Copyright (c) Microsoft Corporation. All rights reserved.        */
   4:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
   5:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*       This software is licensed under the Microsoft Software License   */
   6:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
   7:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
   8:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*       and in the root directory of this software.                      */
   9:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  10:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  11:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  12:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  13:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  14:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  15:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  16:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /** ThreadX Component                                                     */
  17:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  18:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**   Port Specific                                                       */
  19:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**                                                                       */
  20:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  21:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  22:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  23:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  24:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  25:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  26:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  PORT SPECIFIC C INFORMATION                            RELEASE        */
  27:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  28:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    tx_port.h                                         Cortex-M4/GNU     */
  29:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                           6.1.12       */
  30:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  31:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  AUTHOR                                                                */
  32:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  33:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    Scott Larson, Microsoft Corporation                                 */
  34:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  35:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  DESCRIPTION                                                           */
  36:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  37:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    This file contains data type definitions that make the ThreadX      */
  38:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    real-time kernel function identically on a variety of different     */
  39:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    processor architectures.  For example, the size or number of bits   */
  40:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    in an "int" data type vary between microprocessor architectures and */
ARM GAS  C:\Users\HP\AppData\Local\Temp\cchmVhmR.s 			page 7


  41:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    even C compilers for the same microprocessor.  ThreadX does not     */
  42:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    directly use native C data types.  Instead, ThreadX creates its     */
  43:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    own special types that can be mapped to actual data types by this   */
  44:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    file to guarantee consistency in the interface and functionality.   */
  45:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  46:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    This file replaces the previous Cortex-M3/M4/M7 files. It unifies   */
  47:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    the ARMv7-M architecture and compilers into one common file.        */
  48:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  49:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  RELEASE HISTORY                                                       */
  50:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  51:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*    DATE              NAME                      DESCRIPTION             */
  52:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  53:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  06-02-2021      Scott Larson            Initial Version 6.1.7         */
  54:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  01-31-2022      Scott Larson            Modified comments, updated    */
  55:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            typedef to fix misra        */
  56:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            violation,                  */
  57:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            fixed predefined macro,     */
  58:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            resulting in version 6.1.10 */
  59:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  04-25-2022      Scott Larson            Modified comments and added   */
  60:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            volatile to registers,      */
  61:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            resulting in version 6.1.11 */
  62:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*  07-29-2022      Scott Larson            Modified comments and         */
  63:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            described BASEPRI usage,    */
  64:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                            resulting in version 6.1.12 */
  65:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*                                                                        */
  66:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /**************************************************************************/
  67:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  68:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_PORT_H
  69:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_H
  70:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  71:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  72:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Determine if the optional ThreadX user define file should be used.  */
  73:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  74:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_INCLUDE_USER_DEFINE_FILE
  75:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  76:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Yes, include the user defines in tx_user.h. The defines in this file may
  77:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    alternately be defined on the command line.  */
  78:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  79:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include "tx_user.h"
  80:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  81:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  82:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  83:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define compiler library include files.  */
  84:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  85:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include <stdlib.h>
  86:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include <string.h>
  87:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  88:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ICCARM__
  89:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include <intrinsics.h>                     /* IAR Intrinsics */
  90:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define __asm__ __asm                       /* Define to make all inline asm look similar */
  91:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
  92:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include <yvals.h>
  93:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  94:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif /* __ICCARM__ */
  95:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
  96:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ghs__
  97:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include <arm_ghs.h>
ARM GAS  C:\Users\HP\AppData\Local\Temp\cchmVhmR.s 			page 8


  98:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #include "tx_ghs.h"
  99:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
 100:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 101:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 102:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #if !defined(__GNUC__) && !defined(__CC_ARM)
 103:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define __get_control_value __get_CONTROL
 104:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define __set_control_value __set_CONTROL
 105:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 106:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 107:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef __GNUC__
 108:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define __get_ipsr_value __get_IPSR
 109:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 110:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 111:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define ThreadX basic types for this port.  */
 112:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 113:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define VOID                                    void
 114:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef char                                    CHAR;
 115:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned char                           UCHAR;
 116:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef int                                     INT;
 117:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned int                            UINT;
 118:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef long                                    LONG;
 119:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned long                           ULONG;
 120:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned long long                      ULONG64;
 121:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef short                                   SHORT;
 122:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** typedef unsigned short                          USHORT;
 123:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define ULONG64_DEFINED
 124:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 125:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the priority levels for ThreadX.  Legal values range
 126:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    from 32 to 1024 and MUST be evenly divisible by 32.  */
 127:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 128:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MAX_PRIORITIES
 129:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MAX_PRIORITIES                       32
 130:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 131:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 132:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 133:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the minimum stack for a ThreadX thread on this processor. If the size supplied during
 134:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    thread creation is less than this value, the thread create call will return an error.  */
 135:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 136:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MINIMUM_STACK
 137:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MINIMUM_STACK                        200         /* Minimum stack size for this port  */
 138:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 139:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 140:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 141:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the system timer thread's default stack size and priority.  These are only applicable
 142:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    if TX_TIMER_PROCESS_IN_ISR is not defined.  */
 143:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 144:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_STACK_SIZE
 145:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_STACK_SIZE              1024        /* Default timer thread stack size  */
 146:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 147:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 148:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TIMER_THREAD_PRIORITY
 149:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_THREAD_PRIORITY                0           /* Default timer thread priority    */
 150:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 151:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 152:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* By default, ThreadX for Cortex-M uses the PRIMASK register to enable/disable interrupts.
 153:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** If using BASEPRI is desired, define the following two symbols for both c and assembly files:
 154:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** TX_PORT_USE_BASEPRI - This tells ThreadX to use BASEPRI instead of PRIMASK.
ARM GAS  C:\Users\HP\AppData\Local\Temp\cchmVhmR.s 			page 9


 155:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** TX_PORT_BASEPRI = (priority_mask << (8 - number_priority_bits)) - this defines the maximum priority
 156:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** Any interrupt with a higher priority than priority_mask will not be masked, thus the interrupt will
 157:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** */
 158:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 159:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define various constants for the ThreadX Cortex-M port.  */
 160:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 161:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INT_DISABLE                          1           /* Disable interrupts               */
 162:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INT_ENABLE                           0           /* Enable interrupts                */
 163:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 164:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 165:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the clock source for trace event entry time stamp. The following two item are port specif
 166:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    For example, if the time source is at the address 0x0a800024 and is 16-bits in size, the clock
 167:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    source constants would be:
 168:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 169:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((volatile ULONG *) 0x0a800024)
 170:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0x0000FFFFUL
 171:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 172:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** */
 173:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 174:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 175:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_SOURCE
 176:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    *((volatile ULONG *) 0xE0001004)
 177:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 178:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 179:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG   _tx_misra_time_stamp_get(VOID);
 180:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_SOURCE                    _tx_misra_time_stamp_get()
 181:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 182:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 183:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_TRACE_TIME_MASK
 184:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TRACE_TIME_MASK                      0xFFFFFFFFUL
 185:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 186:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 187:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ghs__
 188:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define constants for Green Hills EventAnalyzer.  */
 189:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 190:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the number of ticks per second. This informs the EventAnalyzer what the timestamps
 191:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    represent.  By default, this is set to 1,000,000 i.e., one tick every microsecond. */
 192:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 193:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EL_TICKS_PER_SECOND                  1000000
 194:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 195:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the method of how to get the upper and lower 32-bits of the time stamp. By default, simpl
 196:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    simulate the time-stamp source with a counter.  */
 197:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 198:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define read_tbu()                              _tx_el_time_base_upper
 199:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define read_tbl()                              ++_tx_el_time_base_lower
 200:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* __ghs__ */
 201:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 202:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the port specific options for the _tx_build_options variable. This variable indicates
 203:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    how the ThreadX library was built.  */
 204:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 205:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_BUILD_OPTIONS          (0)
 206:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 207:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 208:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the in-line initialization constant so that modules with in-line
 209:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    initialization capabilities can prevent their initialization from being
 210:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    a function call.  */
 211:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  C:\Users\HP\AppData\Local\Temp\cchmVhmR.s 			page 10


 212:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 213:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_DISABLE_INLINE
 214:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 215:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_INLINE_INITIALIZATION
 216:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 217:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 218:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 219:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Determine whether or not stack checking is enabled. By default, ThreadX stack checking is
 220:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    disabled. When the following is defined, ThreadX thread stack checking is enabled.  If stack
 221:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    checking is enabled (TX_ENABLE_STACK_CHECKING is defined), the TX_DISABLE_STACK_FILLING
 222:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    define is negated, thereby forcing the stack fill which is necessary for the stack checking
 223:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    logic.  */
 224:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 225:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 226:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_ENABLE_STACK_CHECKING
 227:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #undef TX_DISABLE_STACK_FILLING
 228:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 229:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 230:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 231:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 232:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the TX_THREAD control block extensions for this port. The main reason
 233:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    for the multiple macros is so that backward compatibility can be maintained with
 234:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    existing ThreadX kernel awareness modules.  */
 235:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 236:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_0
 237:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_1
 238:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 239:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID    *tx_thread_iar_tls_pointer;
 240:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ghs__)
 241:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2           VOID *  tx_thread_eh_globals;                           \
 242:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                         int     Errno;             /* errno.  */                \
 243:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                         char *  strtok_saved_pos;  /* strtok() position.  */
 244:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 245:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_2
 246:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 247:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 248:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 249:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_EXTENSION_3
 250:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 251:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 252:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 253:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the port extensions of the remaining ThreadX objects.  */
 254:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 255:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_EXTENSION
 256:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_EXTENSION
 257:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_EXTENSION
 258:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_EXTENSION
 259:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_EXTENSION
 260:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_EXTENSION
 261:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_EXTENSION
 262:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 263:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 264:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the user extension field of the thread control block.  Nothing
 265:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    additional is needed for this port so it is defined as white space.  */
 266:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 267:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_USER_EXTENSION
 268:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_USER_EXTENSION
ARM GAS  C:\Users\HP\AppData\Local\Temp\cchmVhmR.s 			page 11


 269:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 270:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 271:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 272:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the macros for processing extensions in tx_thread_create, tx_thread_delete,
 273:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    tx_thread_shell_entry, and tx_thread_terminate.  */
 274:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 275:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 276:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef  TX_ENABLE_IAR_LIBRARY_SUPPORT
 277:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #if (__VER__ < 8000000)
 278:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 279:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      __iar_dlib_perthread_deallocate
 280:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     thread_ptr -> tx_thread_iar_tls
 281:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               __iar_dlib_perthread_access(0);
 282:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 283:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void    *_tx_iar_create_per_thread_tls_area(void);
 284:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void    _tx_iar_destroy_per_thread_tls_area(void *tls_ptr);
 285:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void    __iar_Initlocks(void);
 286:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 287:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)                      thread_ptr -> tx_thread_iar_tls
 288:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)                      do {_tx_iar_destroy_per_thread_
 289:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                         thread_ptr -> tx_thread_iar
 290:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION               do {__iar_Initlocks();} while(0
 291:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 292:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 293:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_CREATE_EXTENSION(thread_ptr)
 294:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_DELETE_EXTENSION(thread_ptr)
 295:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 296:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 297:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #if defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_FPU_VFP)
 298:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 299:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_MISRA_ENABLE
 300:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 301:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  _tx_misra_control_get(void);
 302:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void   _tx_misra_control_set(ULONG value);
 303:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  _tx_misra_fpccr_get(void);
 304:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void   _tx_misra_vfp_touch(void);
 305:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 306:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE not defined */
 307:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 308:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define some helper functions (these are intrinsics in some compilers). */
 309:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __GNUC__ /* GCC and ARM Compiler 6 */
 310:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 311:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline ULONG __get_control_value(void)
 312:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 313:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  control_value;
 314:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 315:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 316:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 317:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 318:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 319:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_control_value(ULONG control_value)
 320:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 321:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 322:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 323:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 324:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 325:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  C:\Users\HP\AppData\Local\Temp\cchmVhmR.s 			page 12


 326:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* ARM Compiler 5 */
 327:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 328:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) ULONG __get_control_value(void)
 329:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 330:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG  control_value;
 331:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 332:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm volatile ("MRS control_value,CONTROL");
 333:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(control_value);
 334:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 335:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 336:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) void __set_control_value(ULONG control_value)
 337:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 338:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR CONTROL,control_value");
 339:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 340:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Can't access VFP registers with inline asm, so define this in tx_thread_schedule.  */
 341:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** void _tx_vfp_access(void);
 342:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  _tx_vfp_access();
 343:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 344:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)  /* IAR */
 345:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_VFP_TOUCH()  __asm__ volatile ("VMOV.F32 s0, s0");
 346:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* Helper functions for different compilers */
 347:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 348:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 349:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 350:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 351:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* A completed thread falls into _thread_shell_entry and we can simply deactivate the FPU via CONTR
 352:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    in order to ensure no lazy stacking will occur. */
 353:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 354:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 355:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 356:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 357:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 358:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  __get_control_value();    
 359:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 360:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         __set_control_value(_tx_vfp_state);        
 361:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 362:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 363:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 364:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)   {                                              
 365:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_vfp_state;                          
 366:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_misra_control_get();  
 367:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_vfp_state =  _tx_vfp_state & ~((ULONG) 
 368:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_misra_control_set(_tx_vfp_state);      
 369:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 370:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 371:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 372:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 373:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* A thread can be terminated by another thread, so we first check if it's self-terminating and not
 374:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    If so, deactivate the FPU via CONTROL.FPCA. Otherwise we are in an interrupt or another thread i
 375:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    this one, so if the FPCCR.LSPACT bit is set, we need to save the CONTROL.FPCA state, touch the F
 376:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    the lazy FPU save, then restore the CONTROL.FPCA state. */
 377:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 378:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 379:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 380:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 381:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 382:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
ARM GAS  C:\Users\HP\AppData\Local\Temp\cchmVhmR.s 			page 13


 383:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 384:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 385:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 386:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  __get_control_value();
 387:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 388:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             __set_control_value(_tx_vfp_state);    
 389:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 390:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         else                                       
 391:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 392:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 393:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  *((volatile ULONG *) 0xE00
 394:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 395:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 396:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             {                                      
 397:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 398:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = __get_control_value
 399:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 400:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 TX_VFP_TOUCH();                    
 401:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 402:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 {                                  
 403:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  __get_control_
 404:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 405:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     __set_control_value(_tx_vfp_sta
 406:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 }                                  
 407:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             }                                      
 408:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 409:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 410:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 411:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 412:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)  {                                              
 413:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     ULONG  _tx_system_state;                       
 414:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         _tx_system_state =  TX_THREAD_GET_SYSTEM_ST
 415:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         if ((_tx_system_state == ((ULONG) 0)) && ((
 416:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 417:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_vfp_state;                      
 418:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_misra_control_get(
 419:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_vfp_state =  _tx_vfp_state & ~((ULO
 420:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_misra_control_set(_tx_vfp_state);  
 421:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 422:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         else                                       
 423:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         {                                          
 424:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         ULONG  _tx_fpccr;                          
 425:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_misra_fpccr_get();    
 426:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             _tx_fpccr =  _tx_fpccr & ((ULONG) 0x01)
 427:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             if (_tx_fpccr == ((ULONG) 0x01))       
 428:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             {                                      
 429:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             ULONG _tx_vfp_state;                   
 430:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state = _tx_misra_control_g
 431:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_vfp_state =  _tx_vfp_state & ((
 432:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 _tx_misra_vfp_touch();             
 433:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 if (_tx_vfp_state == ((ULONG) 0))  
 434:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 {                                  
 435:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_misra_cont
 436:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_vfp_state =  _tx_vfp_state 
 437:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                     _tx_misra_control_set(_tx_vfp_s
 438:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                                 }                                  
 439:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                             }                                      
ARM GAS  C:\Users\HP\AppData\Local\Temp\cchmVhmR.s 			page 14


 440:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                         }                                          
 441:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                     }
 442:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 443:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 444:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* No VFP in use */
 445:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 446:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 447:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_TERMINATED_EXTENSION(thread_ptr)
 448:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 449:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* defined(__ARMVFP__) || defined(__ARM_PCS_VFP) || defined(__ARM_FP) || defined(__TARGET_F
 450:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 451:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 452:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the ThreadX object creation extensions for the remaining objects.  */
 453:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 454:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_CREATE_EXTENSION(pool_ptr)
 455:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_CREATE_EXTENSION(pool_ptr)
 456:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_CREATE_EXTENSION(group_ptr)
 457:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_CREATE_EXTENSION(mutex_ptr)
 458:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_CREATE_EXTENSION(queue_ptr)
 459:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_CREATE_EXTENSION(semaphore_ptr)
 460:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_CREATE_EXTENSION(timer_ptr)
 461:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 462:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 463:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the ThreadX object deletion extensions for the remaining objects.  */
 464:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 465:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BLOCK_POOL_DELETE_EXTENSION(pool_ptr)
 466:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_BYTE_POOL_DELETE_EXTENSION(pool_ptr)
 467:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_EVENT_FLAGS_GROUP_DELETE_EXTENSION(group_ptr)
 468:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_MUTEX_DELETE_EXTENSION(mutex_ptr)
 469:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_QUEUE_DELETE_EXTENSION(queue_ptr)
 470:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_SEMAPHORE_DELETE_EXTENSION(semaphore_ptr)
 471:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_TIMER_DELETE_EXTENSION(timer_ptr)
 472:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 473:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 474:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the get system state macro.  */
 475:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 476:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_GET_SYSTEM_STATE
 477:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_MISRA_ENABLE
 478:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 479:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __CC_ARM /* ARM Compiler 5 */
 480:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 481:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** register unsigned int _ipsr __asm("ipsr");
 482:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _ipsr)
 483:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 484:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and ARM Compiler 6 */
 485:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 486:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_ipsr_value(void)
 487:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 488:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int  ipsr_value;
 489:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 490:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(ipsr_value);
 491:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 492:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 493:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_ipsr_value())
 494:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 495:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__ICCARM__)   /* IAR */
 496:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
ARM GAS  C:\Users\HP\AppData\Local\Temp\cchmVhmR.s 			page 15


 497:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | __get_IPSR())
 498:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 499:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE for different compilers */
 500:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 501:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else   /* TX_MISRA_ENABLE is defined, use MISRA function. */
 502:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** ULONG   _tx_misra_ipsr_get(VOID);
 503:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_GET_SYSTEM_STATE()        (_tx_thread_system_state | _tx_misra_ipsr_get())
 504:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_MISRA_ENABLE */
 505:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif  /* TX_THREAD_GET_SYSTEM_STATE */
 506:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 507:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 508:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the check for whether or not to call the _tx_thread_system_return function.  A non-zero v
 509:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    indicates that _tx_thread_system_return should not be called. This overrides the definition in t
 510:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    for Cortex-M since so we don't waste time checking the _tx_thread_system_state variable that is 
 511:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    zero after initialization for Cortex-M ports. */
 512:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 513:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_THREAD_SYSTEM_RETURN_CHECK
 514:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_THREAD_SYSTEM_RETURN_CHECK(c)    (c) = ((ULONG) _tx_thread_preempt_disable);
 515:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 516:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 517:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the macro to ensure _tx_thread_preempt_disable is set early in initialization in order to
 518:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****    prevent early scheduling on Cortex-M parts.  */
 519:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 520:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_PORT_SPECIFIC_POST_INITIALIZATION    _tx_thread_preempt_disable++;
 521:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 522:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 523:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 524:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 525:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifndef TX_DISABLE_INLINE
 526:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 527:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the TX_LOWEST_SET_BIT_CALCULATE macro for each compiler. */
 528:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef __ICCARM__       /* IAR Compiler */
 529:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __CLZ(__RBIT((m)));
 530:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__CC_ARM) /* AC5 Compiler */
 531:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       (b) = (UINT) __clz(__rbit((m)));
 532:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #elif defined(__GNUC__) /* GCC and AC6 Compiler */
 533:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #define TX_LOWEST_SET_BIT_CALCULATE(m, b)       __asm__ volatile (" RBIT %0,%1 ": "=r" (m) : "r" (m
 534:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****                                                 __asm__ volatile (" CLZ  %0,%1 ": "=r" (b) : "r" (m
 535:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 536:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 537:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 538:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 539:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /* Define the interrupt disable/restore macros for each compiler. */
 540:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 541:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #if defined(__GNUC__) || defined(__ICCARM__)
 542:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 543:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** /*** GCC/AC6 and IAR ***/
 544:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 545:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __get_interrupt_posture(void)
 546:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 547:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int posture;
 548:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 549:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
 550:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 551:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 552:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 553:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(posture);
ARM GAS  C:\Users\HP\AppData\Local\Temp\cchmVhmR.s 			page 16


 554:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 555:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 556:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 557:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __set_basepri_value(unsigned int basepri_valu
 558:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 559:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  BASEPRI,%0 ": : "r" (basepri_value));
 560:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 561:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 562:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __enable_interrupts(void)
 563:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 564:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSIE  i": : : "memory");
 565:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 566:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 567:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 568:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline void __restore_interrupt(unsigned int int_posture)
 569:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 570:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 571:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __set_basepri_value(int_posture);
 572:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     //__asm__ volatile ("MSR  BASEPRI,%0": : "r" (int_posture): "memory");
 573:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 574:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 575:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 576:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 577:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 578:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** __attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
  79              		.loc 2 578 63 view .LVU16
  80              	.LBB21:
 579:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 580:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** unsigned int int_posture;
  81              		.loc 2 580 1 view .LVU17
 581:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 582:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     int_posture = __get_interrupt_posture();
  82              		.loc 2 582 5 view .LVU18
  83              	.LBB22:
  84              	.LBI22:
 545:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
  85              		.loc 2 545 63 view .LVU19
  86              	.LBB23:
 547:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
  87              		.loc 2 547 1 view .LVU20
 551:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
  88              		.loc 2 551 5 view .LVU21
  89              		.syntax unified
  90              	@ 551 "Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h" 1
  91 001c EFF31081 		MRS  r1, PRIMASK 
  92              	@ 0 "" 2
  93              	.LVL4:
 553:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
  94              		.loc 2 553 5 view .LVU22
 553:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
  95              		.loc 2 553 5 is_stmt 0 view .LVU23
  96              		.thumb
  97              		.syntax unified
  98              	.LBE23:
  99              	.LBE22:
 583:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 584:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
ARM GAS  C:\Users\HP\AppData\Local\Temp\cchmVhmR.s 			page 17


 585:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __set_basepri_value(TX_PORT_BASEPRI);
 586:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #else
 587:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile ("CPSID i" : : : "memory");
 100              		.loc 2 587 5 is_stmt 1 view .LVU24
 101              		.syntax unified
 102              	@ 587 "Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h" 1
 103 0020 72B6     		CPSID i
 104              	@ 0 "" 2
 588:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 589:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(int_posture);
 105              		.loc 2 589 5 view .LVU25
 106              	.LVL5:
 107              		.loc 2 589 5 is_stmt 0 view .LVU26
 108              		.thumb
 109              		.syntax unified
 110              	.LBE21:
 111              	.LBE20:
 122:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
 112              		.loc 1 122 9 is_stmt 1 view .LVU27
 122:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
 113              		.loc 1 122 35 is_stmt 0 view .LVU28
 114 0022 264A     		ldr	r2, .L20
 115              	.LVL6:
 122:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
 116              		.loc 1 122 35 view .LVU29
 117 0024 1368     		ldr	r3, [r2]
 118 0026 0133     		adds	r3, r3, #1
 119 0028 1360     		str	r3, [r2]
 125:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
 120              		.loc 1 125 9 is_stmt 1 view .LVU30
 121              	.LVL7:
 122              	.LBB24:
 123              	.LBI24:
 568:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 124              		.loc 2 568 55 view .LVU31
 125              	.LBB25:
 574:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 126              		.loc 2 574 5 view .LVU32
 127              		.syntax unified
 128              	@ 574 "Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h" 1
 129 002a 81F31088 		MSR  PRIMASK,r1
 130              	@ 0 "" 2
 131              	.LVL8:
 574:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 132              		.loc 2 574 5 is_stmt 0 view .LVU33
 133              		.thumb
 134              		.syntax unified
 135              	.LBE25:
 136              	.LBE24:
 128:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 137              		.loc 1 128 9 is_stmt 1 view .LVU34
 128:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 138              		.loc 1 128 19 is_stmt 0 view .LVU35
 139 002e 244B     		ldr	r3, .L20+4
 140 0030 1C68     		ldr	r4, [r3]
 141              	.LVL9:
 129:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         {
ARM GAS  C:\Users\HP\AppData\Local\Temp\cchmVhmR.s 			page 18


 142              		.loc 1 129 9 is_stmt 1 view .LVU36
 129:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         {
 143              		.loc 1 129 16 is_stmt 0 view .LVU37
 144 0032 0020     		movs	r0, #0
 145              	.LVL10:
 146              	.L3:
 129:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         {
 147              		.loc 1 129 31 is_stmt 1 discriminator 1 view .LVU38
 129:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         {
 148              		.loc 1 129 33 is_stmt 0 discriminator 1 view .LVU39
 149 0034 234D     		ldr	r5, .L20+8
 150 0036 2D68     		ldr	r5, [r5]
 129:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         {
 151              		.loc 1 129 9 discriminator 1 view .LVU40
 152 0038 8542     		cmp	r5, r0
 153 003a 04D9     		bls	.L4
 133:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****             {
 154              		.loc 1 133 13 is_stmt 1 view .LVU41
 133:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****             {
 155              		.loc 1 133 16 is_stmt 0 view .LVU42
 156 003c B442     		cmp	r4, r6
 157 003e 02D0     		beq	.L4
 142:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****             }
 158              		.loc 1 142 17 is_stmt 1 discriminator 2 view .LVU43
 142:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****             }
 159              		.loc 1 142 27 is_stmt 0 discriminator 2 view .LVU44
 160 0040 E46A     		ldr	r4, [r4, #44]
 161              	.LVL11:
 129:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         {
 162              		.loc 1 129 64 is_stmt 1 discriminator 2 view .LVU45
 129:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         {
 163              		.loc 1 129 65 is_stmt 0 discriminator 2 view .LVU46
 164 0042 0130     		adds	r0, r0, #1
 165              	.LVL12:
 129:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         {
 166              		.loc 1 129 65 discriminator 2 view .LVU47
 167 0044 F6E7     		b	.L3
 168              	.L4:
 147:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
 169              		.loc 1 147 9 is_stmt 1 view .LVU48
 170              	.LBB26:
 171              	.LBI26:
 578:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 172              		.loc 2 578 63 view .LVU49
 173              	.LBB27:
 580:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 174              		.loc 2 580 1 view .LVU50
 582:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** 
 175              		.loc 2 582 5 view .LVU51
 176              	.LBB28:
 177              	.LBI28:
 545:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 178              		.loc 2 545 63 view .LVU52
 179              	.LBB29:
 547:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #ifdef TX_PORT_USE_BASEPRI
 180              		.loc 2 547 1 view .LVU53
 551:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
ARM GAS  C:\Users\HP\AppData\Local\Temp\cchmVhmR.s 			page 19


 181              		.loc 2 551 5 view .LVU54
 182              		.syntax unified
 183              	@ 551 "Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h" 1
 184 0046 EFF31081 		MRS  r1, PRIMASK 
 185              	@ 0 "" 2
 186              	.LVL13:
 553:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 187              		.loc 2 553 5 view .LVU55
 553:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 188              		.loc 2 553 5 is_stmt 0 view .LVU56
 189              		.thumb
 190              		.syntax unified
 191              	.LBE29:
 192              	.LBE28:
 587:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 193              		.loc 2 587 5 is_stmt 1 view .LVU57
 194              		.syntax unified
 195              	@ 587 "Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h" 1
 196 004a 72B6     		CPSID i
 197              	@ 0 "" 2
 198              		.loc 2 589 5 view .LVU58
 199              	.LVL14:
 200              		.loc 2 589 5 is_stmt 0 view .LVU59
 201              		.thumb
 202              		.syntax unified
 203              	.LBE27:
 204              	.LBE26:
 150:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
 205              		.loc 1 150 9 is_stmt 1 view .LVU60
 150:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
 206              		.loc 1 150 35 is_stmt 0 view .LVU61
 207 004c 1B4A     		ldr	r2, .L20
 208 004e 1368     		ldr	r3, [r2]
 209 0050 013B     		subs	r3, r3, #1
 210 0052 1360     		str	r3, [r2]
 153:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
 211              		.loc 1 153 9 is_stmt 1 view .LVU62
 212              	.LVL15:
 213              	.LBB30:
 214              	.LBI30:
 568:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 215              		.loc 2 568 55 view .LVU63
 216              	.LBB31:
 574:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 217              		.loc 2 574 5 view .LVU64
 218              		.syntax unified
 219              	@ 574 "Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h" 1
 220 0054 81F31088 		MSR  PRIMASK,r1
 221              	@ 0 "" 2
 222              	.LVL16:
 574:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** #endif
 223              		.loc 2 574 5 is_stmt 0 view .LVU65
 224              		.thumb
 225              		.syntax unified
 226              	.LBE31:
 227              	.LBE30:
 156:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
ARM GAS  C:\Users\HP\AppData\Local\Temp\cchmVhmR.s 			page 20


 228              		.loc 1 156 9 is_stmt 1 view .LVU66
 229 0058 FFF7FEFF 		bl	_tx_thread_system_preempt_check
 230              	.LVL17:
 159:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         {
 231              		.loc 1 159 9 view .LVU67
 159:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         {
 232              		.loc 1 159 12 is_stmt 0 view .LVU68
 233 005c B442     		cmp	r4, r6
 234 005e 24D0     		beq	.L10
 167:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         {
 235              		.loc 1 167 14 is_stmt 1 view .LVU69
 167:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         {
 236              		.loc 1 167 17 is_stmt 0 view .LVU70
 237 0060 2FB3     		cbz	r7, .L11
 175:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         {
 238              		.loc 1 175 14 is_stmt 1 view .LVU71
 175:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         {
 239              		.loc 1 175 17 is_stmt 0 view .LVU72
 240 0062 B8F1630F 		cmp	r8, #99
 241 0066 24D9     		bls	.L12
 187:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
 242              		.loc 1 187 13 is_stmt 1 view .LVU73
 243 0068 174B     		ldr	r3, .L20+12
 244 006a 1A68     		ldr	r2, [r3]
 245              	.LVL18:
 190:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****             {
 246              		.loc 1 190 13 view .LVU74
 190:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****             {
 247              		.loc 1 190 16 is_stmt 0 view .LVU75
 248 006c 174B     		ldr	r3, .L20+16
 249 006e 9A42     		cmp	r2, r3
 250 0070 17D0     		beq	.L13
  98:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** 
 251              		.loc 1 98 12 view .LVU76
 252 0072 0020     		movs	r0, #0
 253              	.L6:
 254              	.LVL19:
 199:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****             {
 255              		.loc 1 199 13 is_stmt 1 view .LVU77
 256              	.LBB32:
 257              	.LBI32:
 486:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 258              		.loc 2 486 63 view .LVU78
 259              	.LBB33:
 488:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 260              		.loc 2 488 1 view .LVU79
 489:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(ipsr_value);
 261              		.loc 2 489 5 view .LVU80
 262              		.syntax unified
 263              	@ 489 "Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h" 1
 264 0074 EFF30583 		 MRS  r3,IPSR 
 265              	@ 0 "" 2
 266              	.LVL20:
 490:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 267              		.loc 2 490 5 view .LVU81
 490:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 268              		.loc 2 490 5 is_stmt 0 view .LVU82
ARM GAS  C:\Users\HP\AppData\Local\Temp\cchmVhmR.s 			page 21


 269              		.thumb
 270              		.syntax unified
 271              	.LBE33:
 272              	.LBE32:
 199:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****             {
 273              		.loc 1 199 17 view .LVU83
 274 0078 154A     		ldr	r2, .L20+20
 275              	.LVL21:
 199:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****             {
 276              		.loc 1 199 17 view .LVU84
 277 007a 1268     		ldr	r2, [r2]
 199:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****             {
 278              		.loc 1 199 16 view .LVU85
 279 007c 1343     		orrs	r3, r2, r3
 280 007e 07D0     		beq	.L7
 203:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****                 {
 281              		.loc 1 203 17 is_stmt 1 view .LVU86
 282              	.LBB34:
 283              	.LBI34:
 486:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** {
 284              		.loc 2 486 63 view .LVU87
 285              	.LBB35:
 488:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 286              		.loc 2 488 1 view .LVU88
 489:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h ****     return(ipsr_value);
 287              		.loc 2 489 5 view .LVU89
 288              		.syntax unified
 289              	@ 489 "Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h" 1
 290 0080 EFF30582 		 MRS  r2,IPSR 
 291              	@ 0 "" 2
 292              	.LVL22:
 490:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 293              		.loc 2 490 5 view .LVU90
 490:Middlewares/ST/threadx/ports/cortex_m4/gnu/inc/tx_port.h **** }
 294              		.loc 2 490 5 is_stmt 0 view .LVU91
 295              		.thumb
 296              		.syntax unified
 297              	.LBE35:
 298              	.LBE34:
 203:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****                 {
 299              		.loc 1 203 21 view .LVU92
 300 0084 124B     		ldr	r3, .L20+20
 301 0086 1B68     		ldr	r3, [r3]
 302 0088 1343     		orrs	r3, r3, r2
 203:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****                 {
 303              		.loc 1 203 20 view .LVU93
 304 008a B3F1F03F 		cmp	r3, #-252645136
 305 008e 12D3     		bcc	.L14
 306              	.L7:
 214:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****     {
 307              		.loc 1 214 5 is_stmt 1 view .LVU94
 214:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****     {
 308              		.loc 1 214 8 is_stmt 0 view .LVU95
 309 0090 0028     		cmp	r0, #0
 310 0092 C1D1     		bne	.L1
 218:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****     }
 311              		.loc 1 218 9 is_stmt 1 view .LVU96
ARM GAS  C:\Users\HP\AppData\Local\Temp\cchmVhmR.s 			page 22


 218:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****     }
 312              		.loc 1 218 19 is_stmt 0 view .LVU97
 313 0094 4346     		mov	r3, r8
 314 0096 3A46     		mov	r2, r7
 315 0098 4946     		mov	r1, r9
 316 009a 3046     		mov	r0, r6
 317              	.LVL23:
 218:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****     }
 318              		.loc 1 218 19 view .LVU98
 319 009c FFF7FEFF 		bl	_tx_byte_pool_create
 320              	.LVL24:
 218:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****     }
 321              		.loc 1 218 19 view .LVU99
 322 00a0 BAE7     		b	.L1
 323              	.LVL25:
 324              	.L13:
 194:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****             }
 325              		.loc 1 194 24 view .LVU100
 326 00a2 1320     		movs	r0, #19
 327 00a4 E6E7     		b	.L6
 328              	.LVL26:
 329              	.L8:
 330              	.LCFI1:
 331              		.cfi_def_cfa_offset 0
 332              		.cfi_restore 3
 333              		.cfi_restore 4
 334              		.cfi_restore 5
 335              		.cfi_restore 6
 336              		.cfi_restore 7
 337              		.cfi_restore 8
 338              		.cfi_restore 9
 339              		.cfi_restore 14
 105:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****     }
 340              		.loc 1 105 16 view .LVU101
 341 00a6 0220     		movs	r0, #2
 342              	.LVL27:
 343              		.loc 1 223 1 view .LVU102
 344 00a8 7047     		bx	lr
 345              	.LVL28:
 346              	.L10:
 347              	.LCFI2:
 348              		.cfi_def_cfa_offset 32
 349              		.cfi_offset 3, -32
 350              		.cfi_offset 4, -28
 351              		.cfi_offset 5, -24
 352              		.cfi_offset 6, -20
 353              		.cfi_offset 7, -16
 354              		.cfi_offset 8, -12
 355              		.cfi_offset 9, -8
 356              		.cfi_offset 14, -4
 163:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         }
 357              		.loc 1 163 20 view .LVU103
 358 00aa 0220     		movs	r0, #2
 359 00ac B4E7     		b	.L1
 360              	.L11:
 171:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         }
 361              		.loc 1 171 20 view .LVU104
ARM GAS  C:\Users\HP\AppData\Local\Temp\cchmVhmR.s 			page 23


 362 00ae 0320     		movs	r0, #3
 363 00b0 B2E7     		b	.L1
 364              	.L12:
 179:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****         }
 365              		.loc 1 179 20 view .LVU105
 366 00b2 0520     		movs	r0, #5
 367 00b4 B0E7     		b	.L1
 368              	.LVL29:
 369              	.L14:
 207:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c ****                 }
 370              		.loc 1 207 28 view .LVU106
 371 00b6 1320     		movs	r0, #19
 372              	.LVL30:
 222:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** }
 373              		.loc 1 222 5 is_stmt 1 view .LVU107
 222:Middlewares/ST/threadx/common/src/txe_byte_pool_create.c **** }
 374              		.loc 1 222 11 is_stmt 0 view .LVU108
 375 00b8 AEE7     		b	.L1
 376              	.L21:
 377 00ba 00BF     		.align	2
 378              	.L20:
 379 00bc 00000000 		.word	_tx_thread_preempt_disable
 380 00c0 00000000 		.word	_tx_byte_pool_created_ptr
 381 00c4 00000000 		.word	_tx_byte_pool_created_count
 382 00c8 00000000 		.word	_tx_thread_current_ptr
 383 00cc 00000000 		.word	_tx_timer_thread
 384 00d0 00000000 		.word	_tx_thread_system_state
 385              		.cfi_endproc
 386              	.LFE8:
 388              		.text
 389              	.Letext0:
 390              		.file 3 "Middlewares/ST/threadx/common/inc/tx_api.h"
 391              		.file 4 "Middlewares/ST/threadx/common/inc/tx_thread.h"
 392              		.file 5 "Middlewares/ST/threadx/common/inc/tx_timer.h"
 393              		.file 6 "Middlewares/ST/threadx/common/inc/tx_byte_pool.h"
ARM GAS  C:\Users\HP\AppData\Local\Temp\cchmVhmR.s 			page 24


DEFINED SYMBOLS
                            *ABS*:00000000 txe_byte_pool_create.c
C:\Users\HP\AppData\Local\Temp\cchmVhmR.s:20     .text._txe_byte_pool_create:00000000 $t
C:\Users\HP\AppData\Local\Temp\cchmVhmR.s:26     .text._txe_byte_pool_create:00000000 _txe_byte_pool_create
C:\Users\HP\AppData\Local\Temp\cchmVhmR.s:379    .text._txe_byte_pool_create:000000bc $d

UNDEFINED SYMBOLS
_tx_thread_system_preempt_check
_tx_byte_pool_create
_tx_thread_preempt_disable
_tx_byte_pool_created_ptr
_tx_byte_pool_created_count
_tx_thread_current_ptr
_tx_timer_thread
_tx_thread_system_state
